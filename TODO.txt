* Pierre-Yves

- reprendre la partie module -> finir la partie typage
- pretty-printing de l'AST typé
- noeud de meta-info dans les AST typés

* Benjamin

- Verifier le typage de l'application dans formula i.e: pred / operator

- étendre le parser pour faire les import why3 interactivement:
  verifier que si un theorie est utilis'ee par why3 elle est bind'ee dans 
  ecEnv ...
- faire un fichier fmap.ec, map.ec, bitstring.ec,
  il faudra faire rapidement aussi un group.ec, cyclic_group.ec ... 

- Je pense que le type bitstring.ec n'est pas pour l'instant link'e dans
  initial, il faut le rajouter.

- dump de ecWhy3, ecFol

- Ajouter le and, or asym 

* Parsing:
- Nom long pour les operateurs infix, 
- Rajouter les operateurs prefix comme dans why3?
- Gerer les <> (le parsing marche mais rien n'est fait apres)

* Pretty:
- Affichage des noms long ou cours, ty instance
- Gestion des notations speciales :
  __get, __set, list ....



* TODO
- require : do not check
- chemins privés (attendre la fin des modules)
- hash-consing
- réfléchir sur le pb d'instanciation de modules
  (=> hypothèses sur adversaire - e.g. pour up-to-bad)
- arbre de preuve + contexte dynamique de preuve
- batterie de tests
- mot-clef "use" + nettoyage de task
- raffinements
- import ocaml batteries
