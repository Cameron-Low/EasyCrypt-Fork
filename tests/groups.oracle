add type 'a list.
add type 'a option.
add type ('a,'b)map.
add op [=] : ('a, 'a) -> bool.
add op [&&] : (bool, bool) -> bool.
add op [||] : (bool, bool) -> bool.
add op [^^] : (bool, bool) -> bool.
add op [!] : bool -> bool.
add op [<] : (int, int) -> bool.
add op [<=] : (int, int) -> bool.
add op [-] : int -> int.
add op [+] : (int, int) -> int.
add op [-] : (int, int) -> int.
add op [*] : (int, int) -> int.
add op [/] : (int, int) -> int.
add op [%] : (int, int) -> int.
add op [^] : (int, int) -> int.
add op abs : int -> int.
add op [<] : (real, real) -> bool.
add op [<=] : (real, real) -> bool.
add op [-] : real -> real.
add op [+] : (real, real) -> real.
add op [-] : (real, real) -> real.
add op [*] : (real, real) -> real.
add op [/] : (real, real) -> real.
add op [^] : (real, real) -> real.
add op real_of_int : int -> real.
add op real_of_bool : bool -> real.
add op abs : real -> real.
add op exp : real -> real.
add op Some : 'a -> 'a option.
add cnst None : 'a option
add op [::] : ('a, 'a list) -> 'a list.
add cnst [] : 'a list
add op mem : ('a, 'a list) -> bool.
add op length : 'a list -> int.
add op [++] : ('a list, 'a list) -> 'a list.
add op upd : (('a,'b)map, 'a, 'b) -> ('a,'b)map.
add op get : (('a,'b)map, 'a) -> 'b.
add op in_dom : ('a, ('a,'b)map) -> bool.
add op in_rng : ('b, ('a,'b)map) -> bool.
 Read src/easycrypt_base.ec
add op [>] (x, y : int) = y < x.
add op [>=] (x, y : int) = y <= x.
add op [>] (x, y : real) = y < x.
add op [>=] (x, y : real) = y <= x.
add op fst (p : 'a * 'b) = (let a,b = p in a).
add op snd (p : 'a * 'b) = (let a,b = p in b).
add axiom Some_inj : forall (x, y : 'a),Some (x) = Some (y) => x = y
add op proj : 'a option -> 'a.
add axiom Proj_Some : forall (x : 'a),proj (Some (x)) = x
add axiom Proj_eq :
  forall (o1, o2 : 'a option),
    o1 <> None => o2 <> None => proj (o1) = proj (o2) => o1 = o2
add axiom Some_or_None :
  forall (o : 'a option),o = None || (exists (x : 'a),o = Some (x))
add op hd : 'a list -> 'a.
add op tl : 'a list -> 'a list.
add axiom head_def : forall (a : 'a, l : 'a list),hd (a :: l) = a
add axiom tail_def : forall (a : 'a, l : 'a list),tl (a :: l) = l
add cnst empty_map : ('a,'b)map
add axiom get_upd_map_same :
  forall (m : ('a,'b)map, a1, a2 : 'a, b : 'b),a1 = a2 => m[a1 <- b][a2] = b
add axiom get_upd_map_diff :
  forall (m : ('a,'b)map, a1, a2 : 'a, b : 'b),
    a1 <> a2 => m[a1 <- b][a2] = m[a2]
add axiom upd_map_comm :
  forall (m : ('a,'b)map, a, a' : 'a, b, b' : 'b),
    a <> a' => m[a <- b][a' <- b'] = m[a' <- b'][a <- b]
add axiom upd_in_dom_same :
  forall (m : ('a,'b)map, a, a' : 'a, b : 'b),a = a' => in_dom (a',m[a <- b])
add axiom upd_in_dom_diff :
  forall (m : ('a,'b)map, a, a' : 'a, b : 'b),
    a <> a' => in_dom (a',m[a <- b]) <=> in_dom (a',m)
add axiom upd_in_rng_same :
  forall (m : ('a,'b)map, a : 'a, b, b' : 'b),b = b' => in_rng (b',m[a <- b])
add axiom upd_in_rng_diff :
  forall (m : ('a,'b)map, a : 'a, b, b' : 'b),
    b <> b' => in_rng (b',m[a <- b]) <=> in_rng (b',m)
add axiom in_dom_in_rng :
  forall (m : ('a,'b)map, a : 'a),in_dom (a,m) => in_rng (m[a],m)
add axiom in_rng_in_dom :
  forall (m : ('a,'b)map, b : 'b),
    in_rng (b,m) => exists (a : 'a),in_dom (a,m) && m[a] = b
add axiom empty_in_dom : forall (a : 'a),!in_dom (a,empty_map)
add axiom empty_in_rng : forall (b : 'b),!in_rng (b,empty_map)
add axiom real_of_bool_true : real_of_bool (true) = 1%r
add axiom real_of_bool_false : real_of_bool (false) = 0%r
add axiom real_of_int_le_compat : forall (x, y : int),x <= y => x%r <= y%r
add axiom real_of_int_lt_compat : forall (x, y : int),x < y => x%r < y%r
add axiom rmult_le_compat_l :
  forall (x, y, z : real),0%r <= x => y <= z => x * y <= x * z
add axiom rmult_le_compat_r :
  forall (x, y, z : real),0%r <= z => x <= y => x * z <= y * z
add axiom rmul_plus_distr_r :
  forall (x, y, z : real),(x + y) * z = x * z + y * z
add axiom rdiv_le_compat :
  forall (x1, x2, y1, y2 : real),
    0%r < y2 => y2 <= y1 => 0%r <= x1 => x1 <= x2 => x1 / y1 <= x2 / y2
add axiom rdiv_0_le :
  forall (x, y : real),0%r < y => 0%r <= x => 0%r <= x / y
add axiom pow2_pos : forall (n : int),0 <= n => 0 < 2 ^ n
 Read tests/groups.ec
add type group.
add cnst q : int
add cnst g : group
add op [^] : (group, int) -> group.
add op [*] : (group, group) -> group.
add axiom group_pow_mod : forall (g1 : group, x : int),g1 ^ x = g1 ^ (x % q)
add axiom group_pow_mult :
  forall (g1 : group, x, y : int),g1 ^ x ^ y = g1 ^ (x * y)
add axiom group_pow_com :
  forall (g1 : group, x, y : int),g1 ^ x ^ y = g1 ^ y ^ x
add axiom group_pow_mult_distr :
  forall (g1 : group, x, y : int),g1 ^ x * g1 ^ y = g1 ^ (x + y)
add axiom group_mult_com : forall (g1, g2 : group),g1 * g2 = g2 * g1
add axiom group_mult_assoc :
  forall (g1, g2, g3 : group),g1 * (g2 * g3) = g1 * g2 * g3
add axiom plus_mod_idemp_l :
  forall (a, b, n : int),(a + b) % n = (a % n + b) % n
add axiom plus_mod_idemp_r :
  forall (a, b, n : int),(a + b) % n = (a + b % n) % n
add axiom minus_mod_idemp_l :
  forall (a, b, n : int),(a - b) % n = (a % n - b) % n
add axiom minus_mod_idemp_r :
  forall (a, b, n : int),(a - b) % n = (a - b % n) % n
add axiom mod_small : forall (a, n : int),0 <= a => a <= n => a % n = a
[global] end game test1 :
[global] end game test1' :
[global] end game test :
[global] end game test' :
Proving equiv _test_test' : test.Main ~ test.Main :
          true ==> z{1} * y{1} = y{1} * z{1}
Current goal
Pending subgoals: 1
pre   = true
stmt1 = 
stmt2 = 
post  = z{1} * y{1} = y{1} * z{1}

 
QED
 Proved specification
  equiv _test_test' : test.Main ~ test.Main :
    true ==> z{1} * y{1} = y{1} * z{1}.


add op _inv : int -> int.
add axiom inv_correct : forall (x : int),0 <> x % q => _inv (x) * x % q = 1
Proving equiv test_test' : test.Main ~ test.Main :
          0 <> z{1} % q ==> z{1} * _inv (z{1}) % q = 1
Current goal
Pending subgoals: 1
pre   = 0 <> z{1} % q
stmt1 = 
stmt2 = 
post  = z{1} * _inv (z{1}) % q = 1

 
QED
Abort test_test'

add axiom mod_mult_l : forall (x, y : int),x * y % q = x % q * y % q
add axiom mod_mult_r : forall (x, y : int),x * (y % q) % q = x * y % q
add axiom inv_correct_2 :
  forall (x, y : int),0 <> x % q => _inv (x) * x * y % q = y % q
[global] end game test2 :
[global] end game test2' :
Proving equiv test2_test2' : test2.Main ~ test2'.Main :
          ={z1} && z1{1} % q <> 0 ==> ={res,z,z1,z2}
Current goal
Pending subgoals: 1
pre   = ={z1} && z1{1} % q <> 0
stmt1 =   1 : z2 = [0..q - 1];
          2 : z = z1 * z2 % q;
stmt2 =   1 : z = [0..q - 1];
          2 : z2 = _inv (z1) * z % q;
post  = g ^ z{1} = g ^ z{2} && ={z,z1,z2}

Current goal
Pending subgoals: 1
pre   = ={z1} && z1{1} % q <> 0
stmt1 =   1 : z2 = [0..q - 1];
          2 : z = z1 * z2 % q;
stmt2 =   1 : z = [0..q - 1];
          2 : z2 = _inv (z1) * z % q;
post  = g ^ z{1} = g ^ z{2} && ={z,z1,z2}

Current goal
Pending subgoals: 1
pre   = ={z1} && z1{1} % q <> 0
stmt1 =   1 : z2 = [0..q - 1];
stmt2 =   1 : z = [0..q - 1];
post  = (let z_L = z1{1} * z2{1} % q in
          g ^ z_L = g ^ z{2} &&
           z_L = z{2} && ={z1} && z2{1} = _inv (z1{2}) * z{2} % q)

Current goal
Pending subgoals: 1
pre   = ={z1} && z1{1} % q <> 0
stmt1 = 
stmt2 = 
post  = (forall (x : int),
           0 <= x => x <= q - 1 =>
              ((0 <= z1{2} * x % q && z1{2} * x % q <= q - 1) &&
                _inv (z1{2}) * (z1{2} * x % q) % q = x) &&
               (0 <= z1{2} * x % q => z1{2} * x % q <= q - 1 =>
               _inv (z1{2}) * (z1{2} * x % q) % q = x =>
               (let z_R = z1{2} * x % q in
                 (let z_L = z1{1} * x % q in
                   g ^ z_L = g ^ z_R &&
                    z_L = z_R && ={z1} && x = _inv (z1{2}) * z_R % q)))) &&
         (forall (y : int),
            0 <= y => y <= q - 1 =>
               (0 <= _inv (z1{2}) * y % q && _inv (z1{2}) * y % q <= q - 1) &&
                z1{2} * (_inv (z1{2}) * y % q) % q = y)

 
QED
 Proved specification
  equiv test2_test2' : test2.Main ~ test2'.Main :
    ={z1} && z1{1} % q <> 0 ==> ={res,z,z1,z2}.


