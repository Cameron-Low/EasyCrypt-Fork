def hash_24_1_160_8_512_(input : unsigned bits[24 + (-1 * 160 + 8 * 512)]) : unsigned bits[160] {
  def res : unsigned bits[160];
  return res;
}

def hash_32_160(input : unsigned bits[32 + 160]) : unsigned bits[160] {
  def res : unsigned bits[160];
  return res;
}

def RSAFun(e : int, msg : int) : int {
  def c : mod[856493388921914742525787865632291071174515900725352326405335188429350861131614759182684940487025058108567765687043401397406499876085526011883952518847602320625179275283894399258914726329286375871631616655696339200700698803184419498440855914046638494072621436285600801628861303917309496767320796757774081884037275021129062311097043811069065134129813052098894652076050770642818286629773613061858046093449397052596131054929334268589113508695899318805838672629158004914929941202979022654071242946927022951856526425004648118146598767698726206333022525746622266455942905163957216200254186027350133498945346640528493882479952232736230896500415792021186769346874956599393664273588562083742478251599568320276447252027741227310483147199192963849081944292876900975918277647120776031372155504778742954790099174395949380915746661125146699290055046149243912990673629558181082313811972443228677486440731444785324511433140914601734167826274885459413235264863070926841259564163437538808768019672248884468509396778868006017825056694527737694344286456543541750419018154410640423332904390983935970882711848905763847141539896954697410758098947088083443692896732782940981928887988517538897076190715025002707972459645585211869883622375323781883955010190719];
  c := (modmsg ** e;
  return (int)c;
}

def RSAInv(d : int, c : int) : int {
  def msg : mod
  msg := (modc ** d;
  return (int)msg;
}

def H(maskedDB : unsigned bits[-8 + (-1 * 160 + 8 * 512)]) : unsigned bits[160] {
  def hashin : unsigned bits[-8 + (-1 * 160 + 8 * 512) + 32];
  def hashout : unsigned bits[160];
  def C : unsigned bits[32];
  hashin[32..32 + (-8 + (-1 * 160 + 8 * 512)) - 1] := maskedDB;
  C := (unsigned bits[32])0;
  hashin[0..0 + 32 - 1] := C;
  hashout := hash_24_1_160_8_512_(hashin);
  return hashout;
}

def G(seed : unsigned bits[160]) : unsigned bits[-8 + (-1 * 160 + 8 * 512)] {
  def mask : unsigned bits[-8 + (-1 * 160 + 8 * 512)];
  def hashin : unsigned bits[160 + 32];
  def hashout : unsigned bits[160];
  def C : unsigned bits[32];
  def T : unsigned bits[4000];
  def counter : int := 0;
  hashin[32..32 + 160 - 1] := seed;
  seq pos := 4000 - 160 to 0 by -160 {
    C := (unsigned bits[32])counter;
    hashin[0..0 + 32 - 1] := C;
    hashout := hash_32_160(hashin);
    T[pos..pos + 160 - 1] := hashout;
    counter := counter + 1;
  }
  mask := T[4000 - (-8 + (-1 * 160 + 8 * 512))..4000 - 1];
  return mask;
}

def Enc(e : int, msg : unsigned bits[-16 + (-2 * 160 + 8 * 512)], lHash : unsigned bits[160], seed : unsigned bits[160]) : int {
  def c : int;
  def DB, dbMask, maskedDB : unsigned bits[-8 + (-1 * 160 + 8 * 512)];
  def seedMask, maskedSeed : unsigned bits[160];
  def payload : unsigned bits[8 * 512];
  def m : int;
  def byte0 : unsigned bits[8] := (unsigned bits[8])0;
  def byte1 : unsigned bits[8] := (unsigned bits[8])1;
  DB[0..0 + (-16 + (-2 * 160 + 8 * 512)) - 1] := msg;
  DB[-16 + (-2 * 160 + 8 * 512)..-16 + (-2 * 160 + 8 * 512) + 8 - 1] := byte1;
  DB[-16 + (-2 * 160 + 8 * 512) + 8..-16 + (-2 * 160 + 8 * 512) + 8 + 160 - 1] := lHash;
  dbMask := G(seed);
  maskedDB := DB ^ dbMask;
  seedMask := H(maskedDB);
  maskedSeed := seed ^ seedMask;
  payload[0..0 + (-8 + (-1 * 160 + 8 * 512)) - 1] := maskedDB;
  payload[-8 + (-1 * 160 + 8 * 512)..-8 + (-1 * 160 + 8 * 512) + 160 - 1] := maskedSeed;
  payload[-8 + (-1 * 160 + 8 * 512) + 160..-8 + (-1 * 160 + 8 * 512) + 160 + 8 - 1] := byte0;
  m := (int)payload;
  c := RSAFun(e, m);
  return c;
}

def Dec(d : int, c : int, lHash : unsigned bits[160]) : bool, unsigned bits[-16 + (-2 * 160 + 8 * 512)] {
  def DB, dbMask, maskedDB : unsigned bits[-8 + (-1 * 160 + 8 * 512)];
  def seedMask, maskedSeed, lHash2, seed : unsigned bits[160];
  def payload : unsigned bits[8 * 512];
  def byte : unsigned bits[8];
  def m : int;
  def msg : unsigned bits[-16 + (-2 * 160 + 8 * 512)];
  def result, result1, result2, result3 : bool;
  def err_msg : unsigned bits[-16 + (-2 * 160 + 8 * 512)] := (unsigned bits[-16 + (-2 * 160 + 8 * 512)])0;
  def byte0 : unsigned bits[8] := (unsigned bits[8])0;
  def byte1 : unsigned bits[8] := (unsigned bits[8])1;
  if (c < 0 || c > 856493388921914742525787865632291071174515900725352326405335188429350861131614759182684940487025058108567765687043401397406499876085526011883952518847602320625179275283894399258914726329286375871631616655696339200700698803184419498440855914046638494072621436285600801628861303917309496767320796757774081884037275021129062311097043811069065134129813052098894652076050770642818286629773613061858046093449397052596131054929334268589113508695899318805838672629158004914929941202979022654071242946927022951856526425004648118146598767698726206333022525746622266455942905163957216200254186027350133498945346640528493882479952232736230896500415792021186769346874956599393664273588562083742478251599568320276447252027741227310483147199192963849081944292876900975918277647120776031372155504778742954790099174395949380915746661125146699290055046149243912990673629558181082313811972443228677486440731444785324511433140914601734167826274885459413235264863070926841259564163437538808768019672248884468509396778868006017825056694527737694344286456543541750419018154410640423332904390983935970882711848905763847141539896954697410758098947088083443692896732782940981928887988517538897076190715025002707972459645585211869883622375323781883955010190719 - 1) {
    result := false;
  }
  else {
    m := RSAInv(d, c);
    payload := (unsigned bits[8 * 512])m;
    maskedDB := payload[0..0 + (-8 + (-1 * 160 + 8 * 512)) - 1];
    maskedSeed := payload[-8 + (-1 * 160 + 8 * 512)..-8 + (-1 * 160 + 8 * 512) + 160 - 1];
    seedMask := H(maskedDB);
    seed := maskedSeed ^ seedMask;
    dbMask := G(seed);
    DB := maskedDB ^ dbMask;
    lHash2 := DB[-16 + (-2 * 160 + 8 * 512) + 8..-16 + (-2 * 160 + 8 * 512) + 8 + 160 - 1];
    result1 := payload[-8 + (-1 * 160 + 8 * 512) + 160..-8 + (-1 * 160 + 8 * 512) + 160 + 8 - 1] == byte0;
    result2 := lHash == lHash2;
    result3 := DB[-16 + (-2 * 160 + 8 * 512)..-16 + (-2 * 160 + 8 * 512) + 8 - 1] == byte1;
    result := result1 && result2 && result3;
  }
  if (result) {
    msg := DB[0..0 + (-16 + (-2 * 160 + 8 * 512)) - 1];
  }
  else {
    msg := err_msg[0..0 + (-16 + (-2 * 160 + 8 * 512)) - 1];
  }
  return result, msg;
}

def Test() : int {
  def t_e : int := 65537;
  def t_lh : unsigned bits[160] := (unsigned bits[160])1245845410931227995499360226027473197403882391305;
  def t_msg : unsigned bits[-16 + (-2 * 160 + 8 * 512)] := (unsigned bits[-16 + (-2 * 160 + 8 * 512)])3355185;
  def t_s : unsigned bits[160] := (unsigned bits[160])0;
  def t_c : int := Enc(t_e, t_msg, t_lh, t_s);
  return t_c;
}
