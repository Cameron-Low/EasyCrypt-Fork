Dear Cathy,

the update regarding the forthcoming EasyCrypt releases and some
tentative plans for 2013 is enclosed. We will be very happy to 
receive your feedback on any of these points, and in particular
to know whether it fits your own plans.

Moreover, we would like to check with you about the possibility of
holding an EasyCrypt school this summer. The exact format would need
to be decided but the idea would be to put the emphasis on working
with EasyCrypt (our very preliminary thoughts would be <= 2 hours
presentation + ~ 4 hours lab per day for 3 days). If you believe that
the event is of interest, we would need to agree on a date (possibly
mid-June to mid-July) and place (most likely East Coast) in the next
few weeks.

For your convenience, we also append an update of an earlier message on
EasyCrypt assurance.


Best

The EasyCrypt team

================================================================

 ** version 0.β

- Deadline: March 15, 2013 (code), May 15, 2013 (documentation)

- New features: 

* module system

* quantified non-relational (Hoare triples, generalizing claims) and
  relational judgments

* higher-order expressions

* library of probabilities and distributions

* basic libraries (int, real, lists, sets, maps, arrays, bitstrings...)

* interactive theorem proving

The beta version will be operational, but we expect that a few tactics
from version v0.2. will not be implemented, and that proving claims
may require more interaction than in version v0.2. However, the
absence of tactics should not be blocking (for instance steps
involving eager sampling can be admitted) and it should be possible to
start porting existing proofs. As indicated in a previous mail, we
plan to complete porting our examples for end of Q3, as writing the
documentation is higher priority.




 ** version  0.δ

- Deadline: June 15, 2013 (code), July 15, 2013 (documentation)

- New features:

* support for datatypes, recursive definitions, and proofs by
  induction

* new implementations of eager, auto, and eqobs_in

* libraries of cryptographic definitions (for instance a library to
   reason about random oracles)



** others

FYI, here is a list of topics on which we are currently working. We
plan to integrate some of these developments in forthcoming releases,
after the summer.

- transformation tactics: we plan to implement tactics that take a
  module and output a transformed module and a relational proof of
  correctness for the transformations. Several such tactics were
  implemented in CertiCrypt (for instance dead code or constant
  propagation), and lead to compact proofs.


- certifying back-end: we plan to implement a minimal Coq backend
  dedicated to the certification of EasyCrypt execution traces. This
  backend should be much more lightweight than certification through
  CertiCrypt, which was not designed as a proof checker for EasyCrypt.


- automation via symbolic methods: we plan to use symbolic methods
  (esp. deducibility relations, in the line of our work on synthesis)
  to automate the following steps: reductions, applications of rnd
  tactic, computation of probabilities. An example of a useful tactic
  based on symbolic methods would be a tactic byddh.


- refinements: we are planning to study the possibility of adding some
  basic form of refinement types, for instance for expressing that an
  integer is positive. 

- loop optimizations: we have agreed in a previous meeting to provide
  support for loop transformations. It will be done some time this year.


==================================================================
Plans for EasyCrypt assurance


- A continuous integration server has been set up and is used in
  production. We are also enforcing a "unit testing" policy for the
  new implementation, and are planning to use some code coverage tool
  for OCaml for ensuring that the unit tests suite covers the whole
  application.

- The proof engine has been redesigned to isolate a small trusted
  kernel that belongs to the TCB. The kernel implements the basic
  rules of the logic and provides an API that other commands from the
  proof engine must use to process proof goals. Hence, bugs in the
  high level proof engine will be caught by the trusted core. The
  documentation will make clear which tactics are in the trusted part,
  and which are not.

- SMT solvers are in the TCB---from the beginning, we decided to
  assume correctness of the solvers. One reason for not addressing
  this issue is that the SMT community is working actively on the
  topic. In particular, some SMT solvers are already certified
  (e.g. Alt-Ergo), or can generate proof witnesses (e.g. z3). For the
  ones in the latter category, we could run their dedicated witness
  checker automatically (in that case, only their proof checkers are
  in the TCB).


- Theories can be realized using why3 and Coq. This possiblity was
  mentionted in meetings and will be used to realize core libraries
  that are shipped with EasyCrypt. Note however that we will start
  working on realizing libraries after the summer.
